//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/NickCuthbert/IdeaProjects/ProtobufGrammar/src\ProtocolBuffers3.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace WhereIsMyTransport.Protobuf {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class ProtocolBuffers3Parser : Parser {
	public const int
		WS=1, COMMENT=2, LINE_COMMENT=3, BuiltInTypes=4, AssignmentOperator=5, 
		ExpressionSeparator=6, SyntaxKeyword=7, LanguageVersionConstant=8, ImportKeyword=9, 
		ImportModifier=10, RepeatedKeyword=11, PackageKeyword=12, OneOfKeyword=13, 
		MapKeyword=14, OptionKeyword=15, EnumKeyword=16, MessageKeyword=17, ServiceKeyword=18, 
		RpcKeyword=19, StreamKeyword=20, ReturnsKeyword=21, GenericTypeOpen=22, 
		GenericTypeClose=23, ToKeyword=24, ReservedKeyword=25, ListSeparator=26, 
		OptionsOpen=27, OptionsClose=28, BodyOpen=29, BodyClose=30, GroupingOpen=31, 
		GroupingClose=32, BooleanLiteral=33, Identifier=34, FullIdentifier=35, 
		Dot=36, Letter=37, Sign=38, IntegerLiteral=39, DecimalLiteral=40, DecimalDigit=41, 
		NonZeroDecimalDigit=42, OctalDigit=43, HexDigit=44, OctalLiteral=45, HexLiteral=46, 
		FloatLiteral=47, Exponent=48, Decimals=49, SingleQuote=50, DoubleQuote=51, 
		CharValue=52, HexEscape=53, OctalEscape=54, CharEscape=55, StringLiteral=56, 
		EmptyStatement=57, Keyword=58;
	public const int
		RULE_optionName = 0, RULE_typeName = 1, RULE_fieldName = 2, RULE_syntax = 3, 
		RULE_importStatement = 4, RULE_package = 5, RULE_optionValue = 6, RULE_option = 7, 
		RULE_messageType = 8, RULE_enumType = 9, RULE_type = 10, RULE_fieldNumber = 11, 
		RULE_fieldOption = 12, RULE_fieldOptions = 13, RULE_repeated = 14, RULE_field = 15, 
		RULE_oneofField = 16, RULE_oneof = 17, RULE_keyType = 18, RULE_map = 19, 
		RULE_range = 20, RULE_ranges = 21, RULE_reservedField = 22, RULE_reservedFields = 23, 
		RULE_reserved = 24, RULE_enum = 25, RULE_enumBody = 26, RULE_enumField = 27, 
		RULE_message = 28, RULE_messageBody = 29, RULE_service = 30, RULE_rpc = 31, 
		RULE_topLevelDefinition = 32, RULE_proto = 33;
	public static readonly string[] ruleNames = {
		"optionName", "typeName", "fieldName", "syntax", "importStatement", "package", 
		"optionValue", "option", "messageType", "enumType", "type", "fieldNumber", 
		"fieldOption", "fieldOptions", "repeated", "field", "oneofField", "oneof", 
		"keyType", "map", "range", "ranges", "reservedField", "reservedFields", 
		"reserved", "enum", "enumBody", "enumField", "message", "messageBody", 
		"service", "rpc", "topLevelDefinition", "proto"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'='", null, "'syntax'", null, "'import'", 
		null, "'repeated'", "'package'", "'oneof'", "'map'", "'option'", "'enum'", 
		"'message'", "'service'", "'rpc'", "'stream'", "'returns'", "'<'", "'>'", 
		"'to'", "'reserved'", "','", "'['", "']'", "'{'", "'}'", "'('", "')'", 
		null, null, null, "'.'", null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'''", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COMMENT", "LINE_COMMENT", "BuiltInTypes", "AssignmentOperator", 
		"ExpressionSeparator", "SyntaxKeyword", "LanguageVersionConstant", "ImportKeyword", 
		"ImportModifier", "RepeatedKeyword", "PackageKeyword", "OneOfKeyword", 
		"MapKeyword", "OptionKeyword", "EnumKeyword", "MessageKeyword", "ServiceKeyword", 
		"RpcKeyword", "StreamKeyword", "ReturnsKeyword", "GenericTypeOpen", "GenericTypeClose", 
		"ToKeyword", "ReservedKeyword", "ListSeparator", "OptionsOpen", "OptionsClose", 
		"BodyOpen", "BodyClose", "GroupingOpen", "GroupingClose", "BooleanLiteral", 
		"Identifier", "FullIdentifier", "Dot", "Letter", "Sign", "IntegerLiteral", 
		"DecimalLiteral", "DecimalDigit", "NonZeroDecimalDigit", "OctalDigit", 
		"HexDigit", "OctalLiteral", "HexLiteral", "FloatLiteral", "Exponent", 
		"Decimals", "SingleQuote", "DoubleQuote", "CharValue", "HexEscape", "OctalEscape", 
		"CharEscape", "StringLiteral", "EmptyStatement", "Keyword"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ProtocolBuffers3.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ProtocolBuffers3Parser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class OptionNameContext : ParserRuleContext {
		public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		public ITerminalNode[] Identifier() { return GetTokens(ProtocolBuffers3Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ProtocolBuffers3Parser.Identifier, i);
		}
		public ITerminalNode GroupingOpen() { return GetToken(ProtocolBuffers3Parser.GroupingOpen, 0); }
		public ITerminalNode GroupingClose() { return GetToken(ProtocolBuffers3Parser.GroupingClose, 0); }
		public ITerminalNode FullIdentifier() { return GetToken(ProtocolBuffers3Parser.FullIdentifier, 0); }
		public ITerminalNode Keyword() { return GetToken(ProtocolBuffers3Parser.Keyword, 0); }
		public OptionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterOptionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitOptionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionNameContext optionName() {
		OptionNameContext _localctx = new OptionNameContext(Context, State);
		EnterRule(_localctx, 0, RULE_optionName);
		int _la;
		try {
			State = 85;
			switch (TokenStream.La(1)) {
			case BuiltInTypes:
			case ImportKeyword:
			case ImportModifier:
			case PackageKeyword:
			case OneOfKeyword:
			case MapKeyword:
			case OptionKeyword:
			case EnumKeyword:
			case MessageKeyword:
			case ServiceKeyword:
			case RpcKeyword:
			case StreamKeyword:
			case ReturnsKeyword:
			case ToKeyword:
			case ReservedKeyword:
			case GroupingOpen:
			case BooleanLiteral:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 75;
				switch (TokenStream.La(1)) {
				case BuiltInTypes:
				case ImportKeyword:
				case ImportModifier:
				case PackageKeyword:
				case OneOfKeyword:
				case MapKeyword:
				case OptionKeyword:
				case EnumKeyword:
				case MessageKeyword:
				case ServiceKeyword:
				case RpcKeyword:
				case StreamKeyword:
				case ReturnsKeyword:
				case ToKeyword:
				case ReservedKeyword:
				case BooleanLiteral:
				case Identifier:
					{
					State = 68; fieldName();
					}
					break;
				case GroupingOpen:
					{
					{
					State = 69; Match(GroupingOpen);
					State = 72;
					switch (TokenStream.La(1)) {
					case FullIdentifier:
						{
						State = 70; Match(FullIdentifier);
						}
						break;
					case BuiltInTypes:
					case ImportKeyword:
					case ImportModifier:
					case PackageKeyword:
					case OneOfKeyword:
					case MapKeyword:
					case OptionKeyword:
					case EnumKeyword:
					case MessageKeyword:
					case ServiceKeyword:
					case RpcKeyword:
					case StreamKeyword:
					case ReturnsKeyword:
					case ToKeyword:
					case ReservedKeyword:
					case BooleanLiteral:
					case Identifier:
						{
						State = 71; fieldName();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 74; Match(GroupingClose);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Dot) {
					{
					{
					State = 77; Match(Dot);
					State = 78; Match(Identifier);
					}
					}
					State = 83;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case Keyword:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; Match(Keyword);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ProtocolBuffers3Parser.Identifier, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_typeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNameContext : ParserRuleContext {
		public ITerminalNode BuiltInTypes() { return GetToken(ProtocolBuffers3Parser.BuiltInTypes, 0); }
		public ITerminalNode ImportKeyword() { return GetToken(ProtocolBuffers3Parser.ImportKeyword, 0); }
		public ITerminalNode ImportModifier() { return GetToken(ProtocolBuffers3Parser.ImportModifier, 0); }
		public ITerminalNode PackageKeyword() { return GetToken(ProtocolBuffers3Parser.PackageKeyword, 0); }
		public ITerminalNode OneOfKeyword() { return GetToken(ProtocolBuffers3Parser.OneOfKeyword, 0); }
		public ITerminalNode MapKeyword() { return GetToken(ProtocolBuffers3Parser.MapKeyword, 0); }
		public ITerminalNode OptionKeyword() { return GetToken(ProtocolBuffers3Parser.OptionKeyword, 0); }
		public ITerminalNode EnumKeyword() { return GetToken(ProtocolBuffers3Parser.EnumKeyword, 0); }
		public ITerminalNode MessageKeyword() { return GetToken(ProtocolBuffers3Parser.MessageKeyword, 0); }
		public ITerminalNode ToKeyword() { return GetToken(ProtocolBuffers3Parser.ToKeyword, 0); }
		public ITerminalNode ReservedKeyword() { return GetToken(ProtocolBuffers3Parser.ReservedKeyword, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(ProtocolBuffers3Parser.BooleanLiteral, 0); }
		public ITerminalNode ServiceKeyword() { return GetToken(ProtocolBuffers3Parser.ServiceKeyword, 0); }
		public ITerminalNode RpcKeyword() { return GetToken(ProtocolBuffers3Parser.RpcKeyword, 0); }
		public ITerminalNode StreamKeyword() { return GetToken(ProtocolBuffers3Parser.StreamKeyword, 0); }
		public ITerminalNode ReturnsKeyword() { return GetToken(ProtocolBuffers3Parser.ReturnsKeyword, 0); }
		public ITerminalNode Identifier() { return GetToken(ProtocolBuffers3Parser.Identifier, 0); }
		public FieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterFieldName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitFieldName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldNameContext fieldName() {
		FieldNameContext _localctx = new FieldNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_fieldName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BuiltInTypes) | (1L << ImportKeyword) | (1L << ImportModifier) | (1L << PackageKeyword) | (1L << OneOfKeyword) | (1L << MapKeyword) | (1L << OptionKeyword) | (1L << EnumKeyword) | (1L << MessageKeyword) | (1L << ServiceKeyword) | (1L << RpcKeyword) | (1L << StreamKeyword) | (1L << ReturnsKeyword) | (1L << ToKeyword) | (1L << ReservedKeyword) | (1L << BooleanLiteral) | (1L << Identifier))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyntaxContext : ParserRuleContext {
		public ITerminalNode SyntaxKeyword() { return GetToken(ProtocolBuffers3Parser.SyntaxKeyword, 0); }
		public ITerminalNode AssignmentOperator() { return GetToken(ProtocolBuffers3Parser.AssignmentOperator, 0); }
		public ITerminalNode LanguageVersionConstant() { return GetToken(ProtocolBuffers3Parser.LanguageVersionConstant, 0); }
		public ITerminalNode ExpressionSeparator() { return GetToken(ProtocolBuffers3Parser.ExpressionSeparator, 0); }
		public SyntaxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntax; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterSyntax(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitSyntax(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyntax(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyntaxContext syntax() {
		SyntaxContext _localctx = new SyntaxContext(Context, State);
		EnterRule(_localctx, 6, RULE_syntax);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(SyntaxKeyword);
			State = 92; Match(AssignmentOperator);
			State = 93; Match(LanguageVersionConstant);
			State = 94; Match(ExpressionSeparator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public ITerminalNode ImportKeyword() { return GetToken(ProtocolBuffers3Parser.ImportKeyword, 0); }
		public ITerminalNode StringLiteral() { return GetToken(ProtocolBuffers3Parser.StringLiteral, 0); }
		public ITerminalNode ExpressionSeparator() { return GetToken(ProtocolBuffers3Parser.ExpressionSeparator, 0); }
		public ITerminalNode ImportModifier() { return GetToken(ProtocolBuffers3Parser.ImportModifier, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_importStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(ImportKeyword);
			State = 98;
			_la = TokenStream.La(1);
			if (_la==ImportModifier) {
				{
				State = 97; Match(ImportModifier);
				}
			}

			State = 100; Match(StringLiteral);
			State = 101; Match(ExpressionSeparator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageContext : ParserRuleContext {
		public ITerminalNode PackageKeyword() { return GetToken(ProtocolBuffers3Parser.PackageKeyword, 0); }
		public ITerminalNode FullIdentifier() { return GetToken(ProtocolBuffers3Parser.FullIdentifier, 0); }
		public ITerminalNode ExpressionSeparator() { return GetToken(ProtocolBuffers3Parser.ExpressionSeparator, 0); }
		public PackageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterPackage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitPackage(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageContext package() {
		PackageContext _localctx = new PackageContext(Context, State);
		EnterRule(_localctx, 10, RULE_package);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(PackageKeyword);
			State = 104; Match(FullIdentifier);
			State = 105; Match(ExpressionSeparator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		public ITerminalNode BooleanLiteral() { return GetToken(ProtocolBuffers3Parser.BooleanLiteral, 0); }
		public ITerminalNode FullIdentifier() { return GetToken(ProtocolBuffers3Parser.FullIdentifier, 0); }
		public ITerminalNode IntegerLiteral() { return GetToken(ProtocolBuffers3Parser.IntegerLiteral, 0); }
		public ITerminalNode Sign() { return GetToken(ProtocolBuffers3Parser.Sign, 0); }
		public ITerminalNode FloatLiteral() { return GetToken(ProtocolBuffers3Parser.FloatLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(ProtocolBuffers3Parser.StringLiteral, 0); }
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_optionValue);
		int _la;
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107; Match(BooleanLiteral);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108; Match(FullIdentifier);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 110;
				_la = TokenStream.La(1);
				if (_la==Sign) {
					{
					State = 109; Match(Sign);
					}
				}

				State = 112; Match(IntegerLiteral);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 114;
				_la = TokenStream.La(1);
				if (_la==Sign) {
					{
					State = 113; Match(Sign);
					}
				}

				State = 116; Match(FloatLiteral);
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 117; Match(StringLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public ITerminalNode OptionKeyword() { return GetToken(ProtocolBuffers3Parser.OptionKeyword, 0); }
		public OptionNameContext optionName() {
			return GetRuleContext<OptionNameContext>(0);
		}
		public ITerminalNode AssignmentOperator() { return GetToken(ProtocolBuffers3Parser.AssignmentOperator, 0); }
		public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		public ITerminalNode ExpressionSeparator() { return GetToken(ProtocolBuffers3Parser.ExpressionSeparator, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 14, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(OptionKeyword);
			State = 121; optionName();
			State = 122; Match(AssignmentOperator);
			State = 123; optionValue();
			State = 124; Match(ExpressionSeparator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageTypeContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode[] Dot() { return GetTokens(ProtocolBuffers3Parser.Dot); }
		public ITerminalNode Dot(int i) {
			return GetToken(ProtocolBuffers3Parser.Dot, i);
		}
		public ITerminalNode[] Identifier() { return GetTokens(ProtocolBuffers3Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ProtocolBuffers3Parser.Identifier, i);
		}
		public MessageTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterMessageType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitMessageType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageTypeContext messageType() {
		MessageTypeContext _localctx = new MessageTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_messageType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			_la = TokenStream.La(1);
			if (_la==Dot) {
				{
				State = 126; Match(Dot);
				}
			}

			State = 133;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 129; Match(Identifier);
					State = 130; Match(Dot);
					}
					} 
				}
				State = 135;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 136; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(ProtocolBuffers3Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ProtocolBuffers3Parser.Identifier, i);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode[] Dot() { return GetTokens(ProtocolBuffers3Parser.Dot); }
		public ITerminalNode Dot(int i) {
			return GetToken(ProtocolBuffers3Parser.Dot, i);
		}
		public EnumTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterEnumType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitEnumType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeContext enumType() {
		EnumTypeContext _localctx = new EnumTypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_enumType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			_la = TokenStream.La(1);
			if (_la==Dot) {
				{
				State = 138; Match(Dot);
				}
			}

			State = 141; Match(Identifier);
			State = 146;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 142; Match(Identifier);
					State = 143; Match(Dot);
					}
					} 
				}
				State = 148;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 149; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public MessageTypeContext messageType() {
			return GetRuleContext<MessageTypeContext>(0);
		}
		public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		public ITerminalNode BuiltInTypes() { return GetToken(ProtocolBuffers3Parser.BuiltInTypes, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_type);
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151; messageType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152; enumType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 153; Match(BuiltInTypes);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNumberContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(ProtocolBuffers3Parser.IntegerLiteral, 0); }
		public FieldNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterFieldNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitFieldNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldNumberContext fieldNumber() {
		FieldNumberContext _localctx = new FieldNumberContext(Context, State);
		EnterRule(_localctx, 22, RULE_fieldNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOptionContext : ParserRuleContext {
		public OptionNameContext optionName() {
			return GetRuleContext<OptionNameContext>(0);
		}
		public ITerminalNode AssignmentOperator() { return GetToken(ProtocolBuffers3Parser.AssignmentOperator, 0); }
		public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		public FieldOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterFieldOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitFieldOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldOptionContext fieldOption() {
		FieldOptionContext _localctx = new FieldOptionContext(Context, State);
		EnterRule(_localctx, 24, RULE_fieldOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; optionName();
			State = 159; Match(AssignmentOperator);
			State = 160; optionValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOptionsContext : ParserRuleContext {
		public FieldOptionContext[] fieldOption() {
			return GetRuleContexts<FieldOptionContext>();
		}
		public FieldOptionContext fieldOption(int i) {
			return GetRuleContext<FieldOptionContext>(i);
		}
		public ITerminalNode[] ListSeparator() { return GetTokens(ProtocolBuffers3Parser.ListSeparator); }
		public ITerminalNode ListSeparator(int i) {
			return GetToken(ProtocolBuffers3Parser.ListSeparator, i);
		}
		public FieldOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterFieldOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitFieldOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldOptionsContext fieldOptions() {
		FieldOptionsContext _localctx = new FieldOptionsContext(Context, State);
		EnterRule(_localctx, 26, RULE_fieldOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; fieldOption();
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==ListSeparator) {
				{
				{
				State = 163; Match(ListSeparator);
				State = 164; fieldOption();
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatedContext : ParserRuleContext {
		public ITerminalNode RepeatedKeyword() { return GetToken(ProtocolBuffers3Parser.RepeatedKeyword, 0); }
		public RepeatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeated; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterRepeated(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitRepeated(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatedContext repeated() {
		RepeatedContext _localctx = new RepeatedContext(Context, State);
		EnterRule(_localctx, 28, RULE_repeated);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(RepeatedKeyword);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		public ITerminalNode AssignmentOperator() { return GetToken(ProtocolBuffers3Parser.AssignmentOperator, 0); }
		public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		public ITerminalNode ExpressionSeparator() { return GetToken(ProtocolBuffers3Parser.ExpressionSeparator, 0); }
		public ITerminalNode RepeatedKeyword() { return GetToken(ProtocolBuffers3Parser.RepeatedKeyword, 0); }
		public ITerminalNode OptionsOpen() { return GetToken(ProtocolBuffers3Parser.OptionsOpen, 0); }
		public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		public ITerminalNode OptionsClose() { return GetToken(ProtocolBuffers3Parser.OptionsClose, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 30, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			_la = TokenStream.La(1);
			if (_la==RepeatedKeyword) {
				{
				State = 172; Match(RepeatedKeyword);
				}
			}

			State = 175; type();
			State = 176; fieldName();
			State = 177; Match(AssignmentOperator);
			State = 178; fieldNumber();
			State = 183;
			_la = TokenStream.La(1);
			if (_la==OptionsOpen) {
				{
				State = 179; Match(OptionsOpen);
				State = 180; fieldOptions();
				State = 181; Match(OptionsClose);
				}
			}

			State = 185; Match(ExpressionSeparator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofFieldContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		public ITerminalNode AssignmentOperator() { return GetToken(ProtocolBuffers3Parser.AssignmentOperator, 0); }
		public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		public ITerminalNode ExpressionSeparator() { return GetToken(ProtocolBuffers3Parser.ExpressionSeparator, 0); }
		public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		public OneofFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneofField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterOneofField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitOneofField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOneofField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OneofFieldContext oneofField() {
		OneofFieldContext _localctx = new OneofFieldContext(Context, State);
		EnterRule(_localctx, 32, RULE_oneofField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; type();
			State = 188; fieldName();
			State = 189; Match(AssignmentOperator);
			State = 190; fieldNumber();
			State = 192;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BuiltInTypes) | (1L << ImportKeyword) | (1L << ImportModifier) | (1L << PackageKeyword) | (1L << OneOfKeyword) | (1L << MapKeyword) | (1L << OptionKeyword) | (1L << EnumKeyword) | (1L << MessageKeyword) | (1L << ServiceKeyword) | (1L << RpcKeyword) | (1L << StreamKeyword) | (1L << ReturnsKeyword) | (1L << ToKeyword) | (1L << ReservedKeyword) | (1L << GroupingOpen) | (1L << BooleanLiteral) | (1L << Identifier) | (1L << Keyword))) != 0)) {
				{
				State = 191; fieldOptions();
				}
			}

			State = 194; Match(ExpressionSeparator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofContext : ParserRuleContext {
		public ITerminalNode OneOfKeyword() { return GetToken(ProtocolBuffers3Parser.OneOfKeyword, 0); }
		public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		public ITerminalNode BodyOpen() { return GetToken(ProtocolBuffers3Parser.BodyOpen, 0); }
		public ITerminalNode BodyClose() { return GetToken(ProtocolBuffers3Parser.BodyClose, 0); }
		public OneofFieldContext[] oneofField() {
			return GetRuleContexts<OneofFieldContext>();
		}
		public OneofFieldContext oneofField(int i) {
			return GetRuleContext<OneofFieldContext>(i);
		}
		public OneofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterOneof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitOneof(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOneof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OneofContext oneof() {
		OneofContext _localctx = new OneofContext(Context, State);
		EnterRule(_localctx, 34, RULE_oneof);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(OneOfKeyword);
			State = 197; fieldName();
			State = 198; Match(BodyOpen);
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BuiltInTypes) | (1L << Identifier) | (1L << Dot))) != 0)) {
				{
				{
				State = 199; oneofField();
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 205; Match(BodyClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyTypeContext : ParserRuleContext {
		public ITerminalNode BuiltInTypes() { return GetToken(ProtocolBuffers3Parser.BuiltInTypes, 0); }
		public KeyTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterKeyType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitKeyType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyTypeContext keyType() {
		KeyTypeContext _localctx = new KeyTypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_keyType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(BuiltInTypes);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapContext : ParserRuleContext {
		public ITerminalNode MapKeyword() { return GetToken(ProtocolBuffers3Parser.MapKeyword, 0); }
		public ITerminalNode GenericTypeOpen() { return GetToken(ProtocolBuffers3Parser.GenericTypeOpen, 0); }
		public KeyTypeContext keyType() {
			return GetRuleContext<KeyTypeContext>(0);
		}
		public ITerminalNode ListSeparator() { return GetToken(ProtocolBuffers3Parser.ListSeparator, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode GenericTypeClose() { return GetToken(ProtocolBuffers3Parser.GenericTypeClose, 0); }
		public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		public ITerminalNode AssignmentOperator() { return GetToken(ProtocolBuffers3Parser.AssignmentOperator, 0); }
		public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		public ITerminalNode ExpressionSeparator() { return GetToken(ProtocolBuffers3Parser.ExpressionSeparator, 0); }
		public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		public MapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterMap(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitMap(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapContext map() {
		MapContext _localctx = new MapContext(Context, State);
		EnterRule(_localctx, 38, RULE_map);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(MapKeyword);
			State = 210; Match(GenericTypeOpen);
			State = 211; keyType();
			State = 212; Match(ListSeparator);
			State = 213; type();
			State = 214; Match(GenericTypeClose);
			State = 215; fieldName();
			State = 216; Match(AssignmentOperator);
			State = 217; fieldNumber();
			State = 219;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BuiltInTypes) | (1L << ImportKeyword) | (1L << ImportModifier) | (1L << PackageKeyword) | (1L << OneOfKeyword) | (1L << MapKeyword) | (1L << OptionKeyword) | (1L << EnumKeyword) | (1L << MessageKeyword) | (1L << ServiceKeyword) | (1L << RpcKeyword) | (1L << StreamKeyword) | (1L << ReturnsKeyword) | (1L << ToKeyword) | (1L << ReservedKeyword) | (1L << GroupingOpen) | (1L << BooleanLiteral) | (1L << Identifier) | (1L << Keyword))) != 0)) {
				{
				State = 218; fieldOptions();
				}
			}

			State = 221; Match(ExpressionSeparator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public FieldNumberContext[] fieldNumber() {
			return GetRuleContexts<FieldNumberContext>();
		}
		public FieldNumberContext fieldNumber(int i) {
			return GetRuleContext<FieldNumberContext>(i);
		}
		public ITerminalNode ToKeyword() { return GetToken(ProtocolBuffers3Parser.ToKeyword, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 40, RULE_range);
		try {
			State = 228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223; fieldNumber();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 224; fieldNumber();
				State = 225; Match(ToKeyword);
				State = 226; fieldNumber();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangesContext : ParserRuleContext {
		public RangeContext[] range() {
			return GetRuleContexts<RangeContext>();
		}
		public RangeContext range(int i) {
			return GetRuleContext<RangeContext>(i);
		}
		public ITerminalNode[] ListSeparator() { return GetTokens(ProtocolBuffers3Parser.ListSeparator); }
		public ITerminalNode ListSeparator(int i) {
			return GetToken(ProtocolBuffers3Parser.ListSeparator, i);
		}
		public RangesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ranges; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterRanges(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitRanges(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRanges(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangesContext ranges() {
		RangesContext _localctx = new RangesContext(Context, State);
		EnterRule(_localctx, 42, RULE_ranges);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; range();
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==ListSeparator) {
				{
				{
				State = 231; Match(ListSeparator);
				State = 232; range();
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedFieldContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(ProtocolBuffers3Parser.StringLiteral, 0); }
		public ReservedFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterReservedField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitReservedField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedFieldContext reservedField() {
		ReservedFieldContext _localctx = new ReservedFieldContext(Context, State);
		EnterRule(_localctx, 44, RULE_reservedField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedFieldsContext : ParserRuleContext {
		public ReservedFieldContext[] reservedField() {
			return GetRuleContexts<ReservedFieldContext>();
		}
		public ReservedFieldContext reservedField(int i) {
			return GetRuleContext<ReservedFieldContext>(i);
		}
		public ITerminalNode[] ListSeparator() { return GetTokens(ProtocolBuffers3Parser.ListSeparator); }
		public ITerminalNode ListSeparator(int i) {
			return GetToken(ProtocolBuffers3Parser.ListSeparator, i);
		}
		public ReservedFieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedFields; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterReservedFields(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitReservedFields(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedFieldsContext reservedFields() {
		ReservedFieldsContext _localctx = new ReservedFieldsContext(Context, State);
		EnterRule(_localctx, 46, RULE_reservedFields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; reservedField();
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==ListSeparator) {
				{
				{
				State = 241; Match(ListSeparator);
				State = 242; reservedField();
				}
				}
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedContext : ParserRuleContext {
		public ITerminalNode ReservedKeyword() { return GetToken(ProtocolBuffers3Parser.ReservedKeyword, 0); }
		public ITerminalNode ExpressionSeparator() { return GetToken(ProtocolBuffers3Parser.ExpressionSeparator, 0); }
		public RangesContext ranges() {
			return GetRuleContext<RangesContext>(0);
		}
		public ReservedFieldsContext reservedFields() {
			return GetRuleContext<ReservedFieldsContext>(0);
		}
		public ReservedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reserved; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterReserved(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitReserved(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReserved(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedContext reserved() {
		ReservedContext _localctx = new ReservedContext(Context, State);
		EnterRule(_localctx, 48, RULE_reserved);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(ReservedKeyword);
			State = 251;
			switch (TokenStream.La(1)) {
			case IntegerLiteral:
				{
				State = 249; ranges();
				}
				break;
			case StringLiteral:
				{
				State = 250; reservedFields();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 253; Match(ExpressionSeparator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public EnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterEnum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitEnum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumContext @enum() {
		EnumContext _localctx = new EnumContext(Context, State);
		EnterRule(_localctx, 50, RULE_enum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; Match(EnumKeyword);
			State = 256; typeName();
			State = 257; enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		public ITerminalNode BodyOpen() { return GetToken(ProtocolBuffers3Parser.BodyOpen, 0); }
		public ITerminalNode BodyClose() { return GetToken(ProtocolBuffers3Parser.BodyClose, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public EnumFieldContext[] enumField() {
			return GetRuleContexts<EnumFieldContext>();
		}
		public EnumFieldContext enumField(int i) {
			return GetRuleContext<EnumFieldContext>(i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 52, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; Match(BodyOpen);
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BuiltInTypes) | (1L << ImportKeyword) | (1L << ImportModifier) | (1L << PackageKeyword) | (1L << OneOfKeyword) | (1L << MapKeyword) | (1L << OptionKeyword) | (1L << EnumKeyword) | (1L << MessageKeyword) | (1L << ServiceKeyword) | (1L << RpcKeyword) | (1L << StreamKeyword) | (1L << ReturnsKeyword) | (1L << ToKeyword) | (1L << ReservedKeyword) | (1L << BooleanLiteral) | (1L << Identifier))) != 0)) {
				{
				State = 262;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 260; option();
					}
					break;
				case 2:
					{
					State = 261; enumField();
					}
					break;
				}
				}
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 267; Match(BodyClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumFieldContext : ParserRuleContext {
		public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		public ITerminalNode AssignmentOperator() { return GetToken(ProtocolBuffers3Parser.AssignmentOperator, 0); }
		public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		public ITerminalNode ExpressionSeparator() { return GetToken(ProtocolBuffers3Parser.ExpressionSeparator, 0); }
		public ITerminalNode OptionsOpen() { return GetToken(ProtocolBuffers3Parser.OptionsOpen, 0); }
		public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		public ITerminalNode OptionsClose() { return GetToken(ProtocolBuffers3Parser.OptionsClose, 0); }
		public EnumFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterEnumField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitEnumField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumFieldContext enumField() {
		EnumFieldContext _localctx = new EnumFieldContext(Context, State);
		EnterRule(_localctx, 54, RULE_enumField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269; fieldName();
			State = 270; Match(AssignmentOperator);
			State = 271; fieldNumber();
			State = 276;
			_la = TokenStream.La(1);
			if (_la==OptionsOpen) {
				{
				State = 272; Match(OptionsOpen);
				State = 273; fieldOptions();
				State = 274; Match(OptionsClose);
				}
			}

			State = 278; Match(ExpressionSeparator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageContext : ParserRuleContext {
		public ITerminalNode MessageKeyword() { return GetToken(ProtocolBuffers3Parser.MessageKeyword, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public MessageBodyContext messageBody() {
			return GetRuleContext<MessageBodyContext>(0);
		}
		public MessageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterMessage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitMessage(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageContext message() {
		MessageContext _localctx = new MessageContext(Context, State);
		EnterRule(_localctx, 56, RULE_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; Match(MessageKeyword);
			State = 281; typeName();
			State = 282; messageBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageBodyContext : ParserRuleContext {
		public ITerminalNode BodyOpen() { return GetToken(ProtocolBuffers3Parser.BodyOpen, 0); }
		public ITerminalNode BodyClose() { return GetToken(ProtocolBuffers3Parser.BodyClose, 0); }
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public EnumContext[] @enum() {
			return GetRuleContexts<EnumContext>();
		}
		public EnumContext @enum(int i) {
			return GetRuleContext<EnumContext>(i);
		}
		public MessageContext[] message() {
			return GetRuleContexts<MessageContext>();
		}
		public MessageContext message(int i) {
			return GetRuleContext<MessageContext>(i);
		}
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public OneofContext[] oneof() {
			return GetRuleContexts<OneofContext>();
		}
		public OneofContext oneof(int i) {
			return GetRuleContext<OneofContext>(i);
		}
		public MapContext[] map() {
			return GetRuleContexts<MapContext>();
		}
		public MapContext map(int i) {
			return GetRuleContext<MapContext>(i);
		}
		public ReservedContext[] reserved() {
			return GetRuleContexts<ReservedContext>();
		}
		public ReservedContext reserved(int i) {
			return GetRuleContext<ReservedContext>(i);
		}
		public MessageBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterMessageBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitMessageBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageBodyContext messageBody() {
		MessageBodyContext _localctx = new MessageBodyContext(Context, State);
		EnterRule(_localctx, 58, RULE_messageBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; Match(BodyOpen);
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BuiltInTypes) | (1L << RepeatedKeyword) | (1L << OneOfKeyword) | (1L << MapKeyword) | (1L << OptionKeyword) | (1L << EnumKeyword) | (1L << MessageKeyword) | (1L << ReservedKeyword) | (1L << Identifier) | (1L << Dot))) != 0)) {
				{
				State = 292;
				switch (TokenStream.La(1)) {
				case BuiltInTypes:
				case RepeatedKeyword:
				case Identifier:
				case Dot:
					{
					State = 285; field();
					}
					break;
				case EnumKeyword:
					{
					State = 286; @enum();
					}
					break;
				case MessageKeyword:
					{
					State = 287; message();
					}
					break;
				case OptionKeyword:
					{
					State = 288; option();
					}
					break;
				case OneOfKeyword:
					{
					State = 289; oneof();
					}
					break;
				case MapKeyword:
					{
					State = 290; map();
					}
					break;
				case ReservedKeyword:
					{
					State = 291; reserved();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 297; Match(BodyClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServiceContext : ParserRuleContext {
		public ITerminalNode ServiceKeyword() { return GetToken(ProtocolBuffers3Parser.ServiceKeyword, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode BodyOpen() { return GetToken(ProtocolBuffers3Parser.BodyOpen, 0); }
		public ITerminalNode BodyClose() { return GetToken(ProtocolBuffers3Parser.BodyClose, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public RpcContext[] rpc() {
			return GetRuleContexts<RpcContext>();
		}
		public RpcContext rpc(int i) {
			return GetRuleContext<RpcContext>(i);
		}
		public ServiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterService(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitService(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitService(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServiceContext service() {
		ServiceContext _localctx = new ServiceContext(Context, State);
		EnterRule(_localctx, 60, RULE_service);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; Match(ServiceKeyword);
			State = 300; typeName();
			State = 301; Match(BodyOpen);
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OptionKeyword || _la==RpcKeyword) {
				{
				State = 304;
				switch (TokenStream.La(1)) {
				case OptionKeyword:
					{
					State = 302; option();
					}
					break;
				case RpcKeyword:
					{
					State = 303; rpc();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 309; Match(BodyClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RpcContext : ParserRuleContext {
		public ITerminalNode RpcKeyword() { return GetToken(ProtocolBuffers3Parser.RpcKeyword, 0); }
		public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		public ITerminalNode[] GroupingOpen() { return GetTokens(ProtocolBuffers3Parser.GroupingOpen); }
		public ITerminalNode GroupingOpen(int i) {
			return GetToken(ProtocolBuffers3Parser.GroupingOpen, i);
		}
		public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public ITerminalNode[] GroupingClose() { return GetTokens(ProtocolBuffers3Parser.GroupingClose); }
		public ITerminalNode GroupingClose(int i) {
			return GetToken(ProtocolBuffers3Parser.GroupingClose, i);
		}
		public ITerminalNode ReturnsKeyword() { return GetToken(ProtocolBuffers3Parser.ReturnsKeyword, 0); }
		public ITerminalNode ExpressionSeparator() { return GetToken(ProtocolBuffers3Parser.ExpressionSeparator, 0); }
		public ITerminalNode[] StreamKeyword() { return GetTokens(ProtocolBuffers3Parser.StreamKeyword); }
		public ITerminalNode StreamKeyword(int i) {
			return GetToken(ProtocolBuffers3Parser.StreamKeyword, i);
		}
		public ITerminalNode OptionsOpen() { return GetToken(ProtocolBuffers3Parser.OptionsOpen, 0); }
		public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		public ITerminalNode OptionsClose() { return GetToken(ProtocolBuffers3Parser.OptionsClose, 0); }
		public RpcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rpc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterRpc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitRpc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRpc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RpcContext rpc() {
		RpcContext _localctx = new RpcContext(Context, State);
		EnterRule(_localctx, 62, RULE_rpc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(RpcKeyword);
			State = 312; fieldName();
			State = 313; Match(GroupingOpen);
			State = 315;
			_la = TokenStream.La(1);
			if (_la==StreamKeyword) {
				{
				State = 314; Match(StreamKeyword);
				}
			}

			State = 317; typeName();
			State = 318; Match(GroupingClose);
			State = 319; Match(ReturnsKeyword);
			State = 320; Match(GroupingOpen);
			State = 322;
			_la = TokenStream.La(1);
			if (_la==StreamKeyword) {
				{
				State = 321; Match(StreamKeyword);
				}
			}

			State = 324; typeName();
			State = 325; Match(GroupingClose);
			State = 330;
			_la = TokenStream.La(1);
			if (_la==OptionsOpen) {
				{
				State = 326; Match(OptionsOpen);
				State = 327; fieldOptions();
				State = 328; Match(OptionsClose);
				}
			}

			State = 332; Match(ExpressionSeparator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDefinitionContext : ParserRuleContext {
		public MessageContext message() {
			return GetRuleContext<MessageContext>(0);
		}
		public EnumContext @enum() {
			return GetRuleContext<EnumContext>(0);
		}
		public ServiceContext service() {
			return GetRuleContext<ServiceContext>(0);
		}
		public TopLevelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterTopLevelDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitTopLevelDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelDefinitionContext topLevelDefinition() {
		TopLevelDefinitionContext _localctx = new TopLevelDefinitionContext(Context, State);
		EnterRule(_localctx, 64, RULE_topLevelDefinition);
		try {
			State = 337;
			switch (TokenStream.La(1)) {
			case MessageKeyword:
				EnterOuterAlt(_localctx, 1);
				{
				State = 334; message();
				}
				break;
			case EnumKeyword:
				EnterOuterAlt(_localctx, 2);
				{
				State = 335; @enum();
				}
				break;
			case ServiceKeyword:
				EnterOuterAlt(_localctx, 3);
				{
				State = 336; service();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtoContext : ParserRuleContext {
		public SyntaxContext syntax() {
			return GetRuleContext<SyntaxContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ProtocolBuffers3Parser.Eof, 0); }
		public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		public PackageContext[] package() {
			return GetRuleContexts<PackageContext>();
		}
		public PackageContext package(int i) {
			return GetRuleContext<PackageContext>(i);
		}
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public TopLevelDefinitionContext[] topLevelDefinition() {
			return GetRuleContexts<TopLevelDefinitionContext>();
		}
		public TopLevelDefinitionContext topLevelDefinition(int i) {
			return GetRuleContext<TopLevelDefinitionContext>(i);
		}
		public ProtoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proto; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.EnterProto(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProtocolBuffers3Listener typedListener = listener as IProtocolBuffers3Listener;
			if (typedListener != null) typedListener.ExitProto(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtocolBuffers3Visitor<TResult> typedVisitor = visitor as IProtocolBuffers3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProtoContext proto() {
		ProtoContext _localctx = new ProtoContext(Context, State);
		EnterRule(_localctx, 66, RULE_proto);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; syntax();
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ImportKeyword) | (1L << PackageKeyword) | (1L << OptionKeyword) | (1L << EnumKeyword) | (1L << MessageKeyword) | (1L << ServiceKeyword))) != 0)) {
				{
				State = 344;
				switch (TokenStream.La(1)) {
				case ImportKeyword:
					{
					State = 340; importStatement();
					}
					break;
				case PackageKeyword:
					{
					State = 341; package();
					}
					break;
				case OptionKeyword:
					{
					State = 342; option();
					}
					break;
				case EnumKeyword:
				case MessageKeyword:
				case ServiceKeyword:
					{
					State = 343; topLevelDefinition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 348;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 349; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3<\x162");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4");
		sb.Append("\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4");
		sb.Append("\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4\x17\t\x17");
		sb.Append("\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B\x4\x1C");
		sb.Append("\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!\t!");
		sb.Append("\x4\"\t\"\x4#\t#\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2K\n\x2\x3\x2\x5");
		sb.Append("\x2N\n\x2\x3\x2\x3\x2\a\x2R\n\x2\f\x2\xE\x2U\v\x2\x3\x2\x5\x2");
		sb.Append("X\n\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5");
		sb.Append("\x3\x6\x3\x6\x5\x6\x65\n\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a");
		sb.Append("\x3\a\x3\b\x3\b\x3\b\x5\bq\n\b\x3\b\x3\b\x5\bu\n\b\x3\b\x3\b");
		sb.Append("\x5\by\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x5\n\x82\n\n\x3");
		sb.Append("\n\x3\n\a\n\x86\n\n\f\n\xE\n\x89\v\n\x3\n\x3\n\x3\v\x5\v\x8E");
		sb.Append("\n\v\x3\v\x3\v\x3\v\a\v\x93\n\v\f\v\xE\v\x96\v\v\x3\v\x3\v\x3");
		sb.Append("\f\x3\f\x3\f\x5\f\x9D\n\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE");
		sb.Append("\x3\xF\x3\xF\x3\xF\a\xF\xA8\n\xF\f\xF\xE\xF\xAB\v\xF\x3\x10");
		sb.Append("\x3\x10\x3\x11\x5\x11\xB0\n\x11\x3\x11\x3\x11\x3\x11\x3\x11");
		sb.Append("\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xBA\n\x11\x3\x11\x3\x11");
		sb.Append("\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xC3\n\x12\x3\x12");
		sb.Append("\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\xCB\n\x13\f\x13\xE");
		sb.Append("\x13\xCE\v\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3");
		sb.Append("\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15");
		sb.Append("\xDE\n\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16");
		sb.Append("\x5\x16\xE7\n\x16\x3\x17\x3\x17\x3\x17\a\x17\xEC\n\x17\f\x17");
		sb.Append("\xE\x17\xEF\v\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\a\x19\xF6");
		sb.Append("\n\x19\f\x19\xE\x19\xF9\v\x19\x3\x1A\x3\x1A\x3\x1A\x5\x1A\xFE");
		sb.Append("\n\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C");
		sb.Append("\x3\x1C\a\x1C\x109\n\x1C\f\x1C\xE\x1C\x10C\v\x1C\x3\x1C\x3\x1C");
		sb.Append("\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x117");
		sb.Append("\n\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F");
		sb.Append("\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x127\n\x1F");
		sb.Append("\f\x1F\xE\x1F\x12A\v\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3 \a");
		sb.Append(" \x133\n \f \xE \x136\v \x3 \x3 \x3!\x3!\x3!\x3!\x5!\x13E\n");
		sb.Append("!\x3!\x3!\x3!\x3!\x3!\x5!\x145\n!\x3!\x3!\x3!\x3!\x3!\x3!\x5");
		sb.Append("!\x14D\n!\x3!\x3!\x3\"\x3\"\x3\"\x5\"\x154\n\"\x3#\x3#\x3#\x3");
		sb.Append("#\x3#\a#\x15B\n#\f#\xE#\x15E\v#\x3#\x3#\x3#\x2\x2$\x2\x4\x6");
		sb.Append("\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34");
		sb.Append("\x36\x38:<>@\x42\x44\x2\x3\a\x2\x6\x6\v\f\xE\x17\x1A\x1B#$\x16F");
		sb.Append("\x2W\x3\x2\x2\x2\x4Y\x3\x2\x2\x2\x6[\x3\x2\x2\x2\b]\x3\x2\x2");
		sb.Append("\x2\n\x62\x3\x2\x2\x2\fi\x3\x2\x2\x2\xEx\x3\x2\x2\x2\x10z\x3");
		sb.Append("\x2\x2\x2\x12\x81\x3\x2\x2\x2\x14\x8D\x3\x2\x2\x2\x16\x9C\x3");
		sb.Append("\x2\x2\x2\x18\x9E\x3\x2\x2\x2\x1A\xA0\x3\x2\x2\x2\x1C\xA4\x3");
		sb.Append("\x2\x2\x2\x1E\xAC\x3\x2\x2\x2 \xAF\x3\x2\x2\x2\"\xBD\x3\x2\x2");
		sb.Append("\x2$\xC6\x3\x2\x2\x2&\xD1\x3\x2\x2\x2(\xD3\x3\x2\x2\x2*\xE6");
		sb.Append("\x3\x2\x2\x2,\xE8\x3\x2\x2\x2.\xF0\x3\x2\x2\x2\x30\xF2\x3\x2");
		sb.Append("\x2\x2\x32\xFA\x3\x2\x2\x2\x34\x101\x3\x2\x2\x2\x36\x105\x3");
		sb.Append("\x2\x2\x2\x38\x10F\x3\x2\x2\x2:\x11A\x3\x2\x2\x2<\x11E\x3\x2");
		sb.Append("\x2\x2>\x12D\x3\x2\x2\x2@\x139\x3\x2\x2\x2\x42\x153\x3\x2\x2");
		sb.Append("\x2\x44\x155\x3\x2\x2\x2\x46N\x5\x6\x4\x2GJ\a!\x2\x2HK\a%\x2");
		sb.Append("\x2IK\x5\x6\x4\x2JH\x3\x2\x2\x2JI\x3\x2\x2\x2KL\x3\x2\x2\x2");
		sb.Append("LN\a\"\x2\x2M\x46\x3\x2\x2\x2MG\x3\x2\x2\x2NS\x3\x2\x2\x2OP");
		sb.Append("\a&\x2\x2PR\a$\x2\x2QO\x3\x2\x2\x2RU\x3\x2\x2\x2SQ\x3\x2\x2");
		sb.Append("\x2ST\x3\x2\x2\x2TX\x3\x2\x2\x2US\x3\x2\x2\x2VX\a<\x2\x2WM\x3");
		sb.Append("\x2\x2\x2WV\x3\x2\x2\x2X\x3\x3\x2\x2\x2YZ\a$\x2\x2Z\x5\x3\x2");
		sb.Append("\x2\x2[\\\t\x2\x2\x2\\\a\x3\x2\x2\x2]^\a\t\x2\x2^_\a\a\x2\x2");
		sb.Append("_`\a\n\x2\x2`\x61\a\b\x2\x2\x61\t\x3\x2\x2\x2\x62\x64\a\v\x2");
		sb.Append("\x2\x63\x65\a\f\x2\x2\x64\x63\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2");
		sb.Append("\x65\x66\x3\x2\x2\x2\x66g\a:\x2\x2gh\a\b\x2\x2h\v\x3\x2\x2\x2");
		sb.Append("ij\a\xE\x2\x2jk\a%\x2\x2kl\a\b\x2\x2l\r\x3\x2\x2\x2my\a#\x2");
		sb.Append("\x2ny\a%\x2\x2oq\a(\x2\x2po\x3\x2\x2\x2pq\x3\x2\x2\x2qr\x3\x2");
		sb.Append("\x2\x2ry\a)\x2\x2su\a(\x2\x2ts\x3\x2\x2\x2tu\x3\x2\x2\x2uv\x3");
		sb.Append("\x2\x2\x2vy\a\x31\x2\x2wy\a:\x2\x2xm\x3\x2\x2\x2xn\x3\x2\x2");
		sb.Append("\x2xp\x3\x2\x2\x2xt\x3\x2\x2\x2xw\x3\x2\x2\x2y\xF\x3\x2\x2\x2");
		sb.Append("z{\a\x11\x2\x2{|\x5\x2\x2\x2|}\a\a\x2\x2}~\x5\xE\b\x2~\x7F\a");
		sb.Append("\b\x2\x2\x7F\x11\x3\x2\x2\x2\x80\x82\a&\x2\x2\x81\x80\x3\x2");
		sb.Append("\x2\x2\x81\x82\x3\x2\x2\x2\x82\x87\x3\x2\x2\x2\x83\x84\a$\x2");
		sb.Append("\x2\x84\x86\a&\x2\x2\x85\x83\x3\x2\x2\x2\x86\x89\x3\x2\x2\x2");
		sb.Append("\x87\x85\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x8A\x3\x2\x2\x2");
		sb.Append("\x89\x87\x3\x2\x2\x2\x8A\x8B\x5\x4\x3\x2\x8B\x13\x3\x2\x2\x2");
		sb.Append("\x8C\x8E\a&\x2\x2\x8D\x8C\x3\x2\x2\x2\x8D\x8E\x3\x2\x2\x2\x8E");
		sb.Append("\x8F\x3\x2\x2\x2\x8F\x94\a$\x2\x2\x90\x91\a$\x2\x2\x91\x93\a");
		sb.Append("&\x2\x2\x92\x90\x3\x2\x2\x2\x93\x96\x3\x2\x2\x2\x94\x92\x3\x2");
		sb.Append("\x2\x2\x94\x95\x3\x2\x2\x2\x95\x97\x3\x2\x2\x2\x96\x94\x3\x2");
		sb.Append("\x2\x2\x97\x98\x5\x4\x3\x2\x98\x15\x3\x2\x2\x2\x99\x9D\x5\x12");
		sb.Append("\n\x2\x9A\x9D\x5\x14\v\x2\x9B\x9D\a\x6\x2\x2\x9C\x99\x3\x2\x2");
		sb.Append("\x2\x9C\x9A\x3\x2\x2\x2\x9C\x9B\x3\x2\x2\x2\x9D\x17\x3\x2\x2");
		sb.Append("\x2\x9E\x9F\a)\x2\x2\x9F\x19\x3\x2\x2\x2\xA0\xA1\x5\x2\x2\x2");
		sb.Append("\xA1\xA2\a\a\x2\x2\xA2\xA3\x5\xE\b\x2\xA3\x1B\x3\x2\x2\x2\xA4");
		sb.Append("\xA9\x5\x1A\xE\x2\xA5\xA6\a\x1C\x2\x2\xA6\xA8\x5\x1A\xE\x2\xA7");
		sb.Append("\xA5\x3\x2\x2\x2\xA8\xAB\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xA9");
		sb.Append("\xAA\x3\x2\x2\x2\xAA\x1D\x3\x2\x2\x2\xAB\xA9\x3\x2\x2\x2\xAC");
		sb.Append("\xAD\a\r\x2\x2\xAD\x1F\x3\x2\x2\x2\xAE\xB0\a\r\x2\x2\xAF\xAE");
		sb.Append("\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB2");
		sb.Append("\x5\x16\f\x2\xB2\xB3\x5\x6\x4\x2\xB3\xB4\a\a\x2\x2\xB4\xB9\x5");
		sb.Append("\x18\r\x2\xB5\xB6\a\x1D\x2\x2\xB6\xB7\x5\x1C\xF\x2\xB7\xB8\a");
		sb.Append("\x1E\x2\x2\xB8\xBA\x3\x2\x2\x2\xB9\xB5\x3\x2\x2\x2\xB9\xBA\x3");
		sb.Append("\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xBC\a\b\x2\x2\xBC!\x3\x2\x2");
		sb.Append("\x2\xBD\xBE\x5\x16\f\x2\xBE\xBF\x5\x6\x4\x2\xBF\xC0\a\a\x2\x2");
		sb.Append("\xC0\xC2\x5\x18\r\x2\xC1\xC3\x5\x1C\xF\x2\xC2\xC1\x3\x2\x2\x2");
		sb.Append("\xC2\xC3\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xC5\a\b\x2\x2\xC5");
		sb.Append("#\x3\x2\x2\x2\xC6\xC7\a\xF\x2\x2\xC7\xC8\x5\x6\x4\x2\xC8\xCC");
		sb.Append("\a\x1F\x2\x2\xC9\xCB\x5\"\x12\x2\xCA\xC9\x3\x2\x2\x2\xCB\xCE");
		sb.Append("\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xCF");
		sb.Append("\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCF\xD0\a \x2\x2\xD0%\x3\x2");
		sb.Append("\x2\x2\xD1\xD2\a\x6\x2\x2\xD2\'\x3\x2\x2\x2\xD3\xD4\a\x10\x2");
		sb.Append("\x2\xD4\xD5\a\x18\x2\x2\xD5\xD6\x5&\x14\x2\xD6\xD7\a\x1C\x2");
		sb.Append("\x2\xD7\xD8\x5\x16\f\x2\xD8\xD9\a\x19\x2\x2\xD9\xDA\x5\x6\x4");
		sb.Append("\x2\xDA\xDB\a\a\x2\x2\xDB\xDD\x5\x18\r\x2\xDC\xDE\x5\x1C\xF");
		sb.Append("\x2\xDD\xDC\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\xDF\x3\x2\x2");
		sb.Append("\x2\xDF\xE0\a\b\x2\x2\xE0)\x3\x2\x2\x2\xE1\xE7\x5\x18\r\x2\xE2");
		sb.Append("\xE3\x5\x18\r\x2\xE3\xE4\a\x1A\x2\x2\xE4\xE5\x5\x18\r\x2\xE5");
		sb.Append("\xE7\x3\x2\x2\x2\xE6\xE1\x3\x2\x2\x2\xE6\xE2\x3\x2\x2\x2\xE7");
		sb.Append("+\x3\x2\x2\x2\xE8\xED\x5*\x16\x2\xE9\xEA\a\x1C\x2\x2\xEA\xEC");
		sb.Append("\x5*\x16\x2\xEB\xE9\x3\x2\x2\x2\xEC\xEF\x3\x2\x2\x2\xED\xEB");
		sb.Append("\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE-\x3\x2\x2\x2\xEF\xED\x3");
		sb.Append("\x2\x2\x2\xF0\xF1\a:\x2\x2\xF1/\x3\x2\x2\x2\xF2\xF7\x5.\x18");
		sb.Append("\x2\xF3\xF4\a\x1C\x2\x2\xF4\xF6\x5.\x18\x2\xF5\xF3\x3\x2\x2");
		sb.Append("\x2\xF6\xF9\x3\x2\x2\x2\xF7\xF5\x3\x2\x2\x2\xF7\xF8\x3\x2\x2");
		sb.Append("\x2\xF8\x31\x3\x2\x2\x2\xF9\xF7\x3\x2\x2\x2\xFA\xFD\a\x1B\x2");
		sb.Append("\x2\xFB\xFE\x5,\x17\x2\xFC\xFE\x5\x30\x19\x2\xFD\xFB\x3\x2\x2");
		sb.Append("\x2\xFD\xFC\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x100\a\b\x2");
		sb.Append("\x2\x100\x33\x3\x2\x2\x2\x101\x102\a\x12\x2\x2\x102\x103\x5");
		sb.Append("\x4\x3\x2\x103\x104\x5\x36\x1C\x2\x104\x35\x3\x2\x2\x2\x105");
		sb.Append("\x10A\a\x1F\x2\x2\x106\x109\x5\x10\t\x2\x107\x109\x5\x38\x1D");
		sb.Append("\x2\x108\x106\x3\x2\x2\x2\x108\x107\x3\x2\x2\x2\x109\x10C\x3");
		sb.Append("\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B\x10D");
		sb.Append("\x3\x2\x2\x2\x10C\x10A\x3\x2\x2\x2\x10D\x10E\a \x2\x2\x10E\x37");
		sb.Append("\x3\x2\x2\x2\x10F\x110\x5\x6\x4\x2\x110\x111\a\a\x2\x2\x111");
		sb.Append("\x116\x5\x18\r\x2\x112\x113\a\x1D\x2\x2\x113\x114\x5\x1C\xF");
		sb.Append("\x2\x114\x115\a\x1E\x2\x2\x115\x117\x3\x2\x2\x2\x116\x112\x3");
		sb.Append("\x2\x2\x2\x116\x117\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118\x119");
		sb.Append("\a\b\x2\x2\x119\x39\x3\x2\x2\x2\x11A\x11B\a\x13\x2\x2\x11B\x11C");
		sb.Append("\x5\x4\x3\x2\x11C\x11D\x5<\x1F\x2\x11D;\x3\x2\x2\x2\x11E\x128");
		sb.Append("\a\x1F\x2\x2\x11F\x127\x5 \x11\x2\x120\x127\x5\x34\x1B\x2\x121");
		sb.Append("\x127\x5:\x1E\x2\x122\x127\x5\x10\t\x2\x123\x127\x5$\x13\x2");
		sb.Append("\x124\x127\x5(\x15\x2\x125\x127\x5\x32\x1A\x2\x126\x11F\x3\x2");
		sb.Append("\x2\x2\x126\x120\x3\x2\x2\x2\x126\x121\x3\x2\x2\x2\x126\x122");
		sb.Append("\x3\x2\x2\x2\x126\x123\x3\x2\x2\x2\x126\x124\x3\x2\x2\x2\x126");
		sb.Append("\x125\x3\x2\x2\x2\x127\x12A\x3\x2\x2\x2\x128\x126\x3\x2\x2\x2");
		sb.Append("\x128\x129\x3\x2\x2\x2\x129\x12B\x3\x2\x2\x2\x12A\x128\x3\x2");
		sb.Append("\x2\x2\x12B\x12C\a \x2\x2\x12C=\x3\x2\x2\x2\x12D\x12E\a\x14");
		sb.Append("\x2\x2\x12E\x12F\x5\x4\x3\x2\x12F\x134\a\x1F\x2\x2\x130\x133");
		sb.Append("\x5\x10\t\x2\x131\x133\x5@!\x2\x132\x130\x3\x2\x2\x2\x132\x131");
		sb.Append("\x3\x2\x2\x2\x133\x136\x3\x2\x2\x2\x134\x132\x3\x2\x2\x2\x134");
		sb.Append("\x135\x3\x2\x2\x2\x135\x137\x3\x2\x2\x2\x136\x134\x3\x2\x2\x2");
		sb.Append("\x137\x138\a \x2\x2\x138?\x3\x2\x2\x2\x139\x13A\a\x15\x2\x2");
		sb.Append("\x13A\x13B\x5\x6\x4\x2\x13B\x13D\a!\x2\x2\x13C\x13E\a\x16\x2");
		sb.Append("\x2\x13D\x13C\x3\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E\x13F\x3");
		sb.Append("\x2\x2\x2\x13F\x140\x5\x4\x3\x2\x140\x141\a\"\x2\x2\x141\x142");
		sb.Append("\a\x17\x2\x2\x142\x144\a!\x2\x2\x143\x145\a\x16\x2\x2\x144\x143");
		sb.Append("\x3\x2\x2\x2\x144\x145\x3\x2\x2\x2\x145\x146\x3\x2\x2\x2\x146");
		sb.Append("\x147\x5\x4\x3\x2\x147\x14C\a\"\x2\x2\x148\x149\a\x1D\x2\x2");
		sb.Append("\x149\x14A\x5\x1C\xF\x2\x14A\x14B\a\x1E\x2\x2\x14B\x14D\x3\x2");
		sb.Append("\x2\x2\x14C\x148\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D\x14E");
		sb.Append("\x3\x2\x2\x2\x14E\x14F\a\b\x2\x2\x14F\x41\x3\x2\x2\x2\x150\x154");
		sb.Append("\x5:\x1E\x2\x151\x154\x5\x34\x1B\x2\x152\x154\x5> \x2\x153\x150");
		sb.Append("\x3\x2\x2\x2\x153\x151\x3\x2\x2\x2\x153\x152\x3\x2\x2\x2\x154");
		sb.Append("\x43\x3\x2\x2\x2\x155\x15C\x5\b\x5\x2\x156\x15B\x5\n\x6\x2\x157");
		sb.Append("\x15B\x5\f\a\x2\x158\x15B\x5\x10\t\x2\x159\x15B\x5\x42\"\x2");
		sb.Append("\x15A\x156\x3\x2\x2\x2\x15A\x157\x3\x2\x2\x2\x15A\x158\x3\x2");
		sb.Append("\x2\x2\x15A\x159\x3\x2\x2\x2\x15B\x15E\x3\x2\x2\x2\x15C\x15A");
		sb.Append("\x3\x2\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D\x15F\x3\x2\x2\x2\x15E");
		sb.Append("\x15C\x3\x2\x2\x2\x15F\x160\a\x2\x2\x3\x160\x45\x3\x2\x2\x2");
		sb.Append("&JMSW\x64ptx\x81\x87\x8D\x94\x9C\xA9\xAF\xB9\xC2\xCC\xDD\xE6");
		sb.Append("\xED\xF7\xFD\x108\x10A\x116\x126\x128\x132\x134\x13D\x144\x14C");
		sb.Append("\x153\x15A\x15C");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace WhereIsMyTransport.Protobuf
